\documentclass{article}
\usepackage{fullpage}
\usepackage{tabulary}
\begin{document}
\begin{center}
{\huge The m68k Educational C Kernel}
\end{center}
\noindent{\Large 1. Setup Development Environment}

This project makes use of several development tools
%We need to write installation instructions and better descriptions
\begin{itemize}
\item The m68k-elf collection to compile and link the m68k educational kernel
\item The m68k-elf-gdb to debug the kernel.
\item The m68k QEMU environment to emulate the hardware.
\end{itemize}

\noindent{\Large 2. Compiling the kernel}

There are several commands available in the provided Makefile.\\

\begin{tabulary}{\textwidth}{r L}
\bf{make} & Compiles and links the kernel\\
\bf{make run} & Compiles and links the kernel. The compiled kernel is then loaded into QEMU, where it begins executing.\\
\bf{make debug} & Compiles and links the kernel. The compiled kernel is then loaded into QEMU, where it waits for a GDB session to connect.\\
\bf{make disassemble} & Compiles the kernel and prints the result to the screen.\\
\bf{make clean} & Deletes all compiled output files.
\end{tabulary}\\
{\tiny.}\\

\noindent{\Large 3. Using QEMU}

QEMU is an architecture emulation program, which has be specially modified to emulate the m68k. QEMU has been configured to run in either stand alone or debug modes (see section 2). Once QEMU is running it behaves like a tty terminal over serial to the emulated hardware. Keystrokes entered are sent directly to the kernel's shell. QEMU has a command mode which can be entered by pressing 'ctrl+a' followed quickly b 'c'. Some useful commands are provided below.\\

\begin{tabulary}{\textwidth}{r L}
\bf{quit} & Exits the QEMU session.\\
\end{tabulary}\\
{\tiny.}\\

\noindent{\Large 4. Using GDB}

GDB is a command line utility which attaches to the running QEMU session to proved debugging capability.In order to debug the m68k educational kernel first run the 'make debug' command(see section 2). The kernel is now compiled and waiting for a GDB session. To attach a GDB session open a new terminal and use the provided script 'run\_gdb'. A GDB session is now attached to the kernel and waiting for commands. Some useful commands are provided below.\\

\begin{tabulary}{\textwidth}{r L}
\bf{c} & Continues the program until a breakpoint is hit.\\
\bf{ctrl+c} & Interrupts the currently running program.\\
\bf{b \textless funct\textgreater } & Adds a break point to the beginning of \textless func\textgreater .\\
\bf{b *0x\textless address\textgreater} & Adds a break point at \textless address\textgreater .\\
\bf{info b} & Lists the current breakpoints.\\
\bf{delete \textless b\#\textgreater} & Deletes the breakpoint \textless b\#\textgreater .\\
\bf{si} & Runs one instruction and advances the program counter.\\
\bf{disassem} & Disassembles the current procedure and prints it to the screen.\\
\bf{info reg} & Displays the current contents of the registers.\\
\bf{quit} & Exits the GDB session.
\end{tabulary}\\
{\tiny.}\\
\newpage
\noindent{\Large 4. Using the basic shell}

The m68k educational kernel comes equipped with a basic shell, which is accessible over serial tty. Upon startup the shell will prompt the user for a username. Once a username has been provided the user will be prompted for a password. By default the username and password are both 'root'. Username and password configurations are found within 'users.c' the 'auth' directory. To add a new user add a new entry to the '\emph{add\_users()}' function in the form of '\emph{register\_user("\textless username\textgreater", "\textless password\textgreater");}'.

Once a user has logged on they will be presented with a prompt in the form of '\emph{root\textgreater}'. The shell supports all printable ascii characters, backspace, and return; arrow keys are not supported. Additionally simple tab completion has been implemented for commands.\\

\noindent{\Large 5. Available Libraries}

The m68k educational kernel does not contain a full implementation of libc. Several libraries have been implemented for use on the m68k.\\

\begin{tabulary}{\textwidth}{r L}
\bf{screen.h} & A collection of functions for printing text to the screen and for reading input from the user.\\
\bf{string.h} & A simplified implementation of the clib 'string.h'.\\
\bf{kmem.h} & Memory management functions such as 'kmalloc' and 'kfree'.\\
\end{tabulary}\\
{\tiny.}\\

\noindent{\Large 6. Writing programs}

User programs must placed inside the 'commands' directory and contain a valid .c and .h file. Since there is no user-space programs must be linked to the shell at compile time; to do this the programs header file must be added to the 'commands.h' header file. Additionally a new entry must be added to the '\emph{initialize\_commands()}' function inside of commands.c in the form of '\emph{add\_cmd("\textless Command\textgreater",  \textless FunctionName\textgreater);}'. Functions linked this way must have the prototype of '\emph{\textless FunctionName\textgreater(int, const char**)}' The first parameter is the number of command arguments; the second is the arguments themselves.\\


\end{document}